[{"content":"Welcome! We are still adding materials. Select a chapter from the menu on the left.\n","date":1508426775,"description":"Home page","lastmod":"2019-10-26T15:26:15Z","objectID":"3976528693a0108357f4928017600865","permalink":"https://ggc-dsa.github.io/dsacapstone-resources/","publishdate":"2018-11-23T15:26:15Z","title":"Home"},{"content":"This site contains a collection of lectures, assignments, and instructor materials for teaching software engineering or development, at an intermediate level. It is assumed that students already know basic software engineering terms and skills.\nMaterials are used for the ITEC 3870 Software Development II course taught at Georgia Gwinnett College . They were developed by Cengiz Gunay and Anca Doloc-Mihu , supported by an Affordable Learning Georgia grant in 2019-2020.\nSome materials are courtesy of Joan Smith, Eugene Agichstein, and the Internets. Slides are offered with the license: CC BY-SA 4.0 .\nTo modify and use these materials in your classes, fork the Github repository or use the edit link at the bottom right of each page.\n","date":1508426775,"description":"About this Site","lastmod":"2019-10-26T15:26:15Z","objectID":"6083a88ee3411b0d17ce02d738f69d47","permalink":"https://ggc-dsa.github.io/dsacapstone-resources/about/","publishdate":"2018-11-23T15:26:15Z","title":"About this Site"},{"content":"Select a chapter from the menu.\n","date":1603121175,"description":"Student Materials","lastmod":"2020-12-20T15:26:15Z","objectID":"d9abbfdff770a90a77fcbeafefb538ab","permalink":"https://ggc-dsa.github.io/dsacapstone-resources/student/","publishdate":"2019-11-23T15:26:15Z","title":"Student Materials"},{"content":"Agile Development ITEC 4230 Data Science and Analytics Project, Anca Doloc-Mihu and Cengiz Gunay (License: CC BY-SA 4.0)\n   Prev - Technology Overview, Next - Agile Principles \n What is AGILITY?   What does it mean to be AGILE?\n Agile Process The current standard for software development\n Waterfall  = sequential assembly line   What is wrong with Waterfall?   In 1990s, software industry abandoned waterfall-style development and introduced AGILE\n  Manifesto for Agile Software Development \u0026amp;ldquo;We are uncovering better ways of developing software by doing it and helping others do it. Through this work we have come to value:\n Individuals and interactions  over processes and tools Working software  over comprehensive documentation Customer collaboration  over contract negotiation Responding to change  over following a plan  That is, while there is value in the items on the right, we value the items on the left more.”\nKent Beck et al\n Agile Statistics The 14th annual STATE of AGILE Report, 2020\n   Agile Statistics The 14th annual STATE of AGILE Report, 2020\n   Agile Statistics The 14th annual STATE of AGILE Report, 2020\n   Agile Statistics The 14th annual STATE of AGILE Report, 2020\n   Agile Statistics The 14th annual STATE of AGILE Report, 2020\n   ","date":-62135596800,"description":"","objectID":"10982256fb9e8de7109341557b86ee00","permalink":"https://ggc-dsa.github.io/dsacapstone-resources/student/chapter-agiledevelopment/","title":"Agile Development"},{"content":"Kanban ITEC 4230 Data Science and Analytics Project, Anca Doloc-Mihu and Cengiz Gunay (License: CC BY-SA 4.0)\n  Prev - Scrum, Next - Requirements in Agile \n Kanban Kanban is a management method helping teams to visualize their work to understand it better, which helps to identify and eliminate bottlenecks, and maximise efficiency (flow). It is the Japanesse word for visual signal. The original author of Kanban was Taiichi Ohno and it was used by Toyota for the first time.\nA Kanban Board keeps everyone in the team on the same page.\n Teams build a Kanban board filled with Kanban cards and set up a work flow limit.\n    Kanban cards One Kanban card per user story, which means one card per work item.\nThe size of the work item should not be either too small or too big.  Cards should have:\n title, description, owner, any other helpful information like due date   As card moves on the board from left to right on the stage of the workflow, the card gets some history (i.e., messages from the teammates).\n Kanban cards should be small enough such that team makes progress on them in a reasonable amount of time.\n  Kanban work flow   Work flow: cards moving from left to right\n Benefits of Kanban board  reveals bottlenecks in workflow (cards not moving forward)    get a sense of the size of the cards team can move forward in a timely matter    a visual assurance that the work is done    Measuring workflow lead time = the time it takes a card to move from the backlog to finish on the board\nIn agile, if values are combined with Kanban characteristics, the outcome would be Agile Kanban. This practice is gaining popularity in Software Developmement, and it means that the Agile iteration approach and Kanban value stream focus are combined.\n","date":-62135596800,"description":"","objectID":"2e15fc0e429e9259bc9f4e4d5a244481","permalink":"https://ggc-dsa.github.io/dsacapstone-resources/student/chapter-agiledevelopment/chapter-kanban/","title":"Kanban"},{"content":"Agile Principles ITEC 4230 Data Science and Analytics Project, Anca Doloc-Mihu and Cengiz Gunay (License: CC BY-SA 4.0)\n  Prev - Agile Development, Next - Scrum \n What is \u0026amp;ldquo;AGILITY\u0026amp;rdquo;?   What does it mean to be AGILE?\n What is \u0026amp;ldquo;AGILITY\u0026amp;rdquo;? Effective (rapid and adaptive) response to change  Effective (rapid and adaptive) communication among all stakeholders  The CLIENT is part of the TEAM  The TEAM is in control of the work performed   resulting in \nrapid, incremental delivery of software\n  Agile Process  User Scenarios are descriptions of what is required (requirements) and drive the entire production process    Plans are short-lived and can change frequently    Software is developed iteratively and is delivered after each iteration    Adapts as changes occur    Agile is based on 4 values and  12 principles   Agile Values  Individuals and interactions over processes and tools   Working software over comprehensive documentation   Customer collaboration over contract negotiation   Responding to change over following a plan    Agile Principles  Satisfy the Customer  Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.\n Welcome Change  Welcome changing requirements, even late in development. Agile processes harness change for the customer\u0026amp;rsquo;s competitive advantage.\n Deliver Solutions Frequently  Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale.\n  Agile Principles Work Together  Business people and developers must work together daily throughout the project (one team).\n Empower \u0026amp;amp; Trust  Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done.\n Face to Face Conversations  The most efficient and effective method of conveying information to and within a development team is face–to–face conversation.\n  Agile Principles Working Solutions  Working …","date":-62135596800,"description":"","objectID":"3361e5f40a770cb713abc67c0df8a57b","permalink":"https://ggc-dsa.github.io/dsacapstone-resources/student/chapter-agiledevelopment/chapter-principles/","title":"Agile Principles"},{"content":"Scrum ITEC 4230 Data Science and Analytics Project, Anca Doloc-Mihu and Cengiz Gunay (License: CC BY-SA 4.0)\n  Prev - Agile Principles, Next - Kanban \n Scrum * Originally proposed by Jeff Sutherland in 90s, then improved by Schwaber and Beedle  * In 1993, J. Sutherland borrowed term ‘scrum’ from Takeuchi and Nonaka, “The New Product Development Game”, Havard Business Review, 1986  * Takeuchi and Nonaka compare high-performing, cross-functional teams to the scrum formation used by Rugby teams.     Scrum * In rugby scrum is the power struggle between two teams to advance on the field  * It requires complete team work, hard work, and strength. That meaning translates to software development    See original article from Scrum Alliance\n Scrum and Agile Scrum is one of several agile frameworks.  Scrum is the most popular agile framework.\n    Scrum Definition Scrum: An [agile] framework within which people can address complex adaptive problems, while productively and creatively delivering products of the highest possible value.\nScrum refers to a lightweight framework that is used in every industry to deliver complex, innovative products and services that truly delight customers. It is simple to understand, but difficult to master.  Scrum fulfils the vision of the Agile Manifesto by helping individuals and businesses organize their work to\n maximize collaboration, minimize errors, deliver frequently, and create multiple opportunities to inspect and adapt.   Scrum Guide, November 2017 version\n How Scrum works Scrum works by delivering large projects in small chunks of the product that a team can begin and complete in one, short timeboxed iteration called sprint.\nScrum is also both iterative and incremental.   Scrum Framework People are the focus of Scrum.\nScrum Teams include people with diverse skillsets; each team has all of the capabilities necessary to deliver a piece of functionality from idea to delivery.  Sprint is a short (one to four weeks long) timeframe during …","date":-62135596800,"description":"","objectID":"d4f93296160149860fba04ae846614f6","permalink":"https://ggc-dsa.github.io/dsacapstone-resources/student/chapter-agiledevelopment/chapter-scrum/","title":"Scrum"},{"content":"Introduction to Data Science and Analytics (DSA) ITEC 4230 Data Science and Analytics Project, Anca Doloc-Mihu and Cengiz Gunay (License: CC BY-SA 4.0)\n  Next - Technology Overview \n Welcome Logistics heads-up:\n Using Piazza for forum discussion and Q\u0026amp;amp;A support Using Discord and Github organizations with previous members Everything online this semester, will meet on live video on Zoom   Meaning:\n Bigger community, can see what others are doing Can see results of their research, answers to questions Can even collaborate with projects? Any problems, potential issues?    Meet your instructor Instructor: Anca Doloc-Mihu\nEmail: adolocmihu@ggc.edu\nOffice: Virtual and W-2208 (by appointment)\nPhone: 678-459-8704\n About the instructor: Dr. Anca Doloc-Mihu  Dual major in Mathematics and Computer Science In 2007, got a PhD in Computer Science on Information Retrieval 2007–17, worked as post-doctoral fellow at Emory Univ. on simulating models of biological neurons and large-scale biological data mining (e.g., SQL, neural nets, genetic algos) 2013–17, Visiting Faculty teaching at Emory Univ., Math \u0026amp;amp; CS Dept. Fall 2017–present, IT faculty at GGC with Soft. Dev. focus and also helped start a Data Science and Analytics major   Your turn!  Login/register on discussion and respond to the “Introductions” topic; create an inline resume  Also quickly introduce yourself now in class!\n Name Major/Year Interest/experience in programming    What\u0026amp;rsquo;s happening? Welcome Advanced Analytics students\n Projects, working with external clients (mostly GGC faculty/students) 3 phases of project work, peer review in each with dire consequences\u0026amp;hellip; Few small assignments Few team presentations Individual presentations for team role, article, and/or software tool   Tool/article presentations Throughout semester I\u0026amp;rsquo;ll let you research topics so we all learn more about options out there:\n Each student will pick one item in any of the topics by a given deadline You will give a …","date":-62135596800,"description":"","objectID":"080b37ae39eb6a14aeb12b2b9b918708","permalink":"https://ggc-dsa.github.io/dsacapstone-resources/student/chapter-intro/","title":"Introduction to Data Science and Analytics (DSA)"},{"content":"Technology Overview ITEC 4230 Data Science and Analytics Project, Anca Doloc-Mihu (License: CC BY-SA 4.0)\n  Prev - Introduction to Data Science and Analytics (DSA), Next - Agile Development \n Tools for pre-processing data  R, Python, bash, Matlab, Mathematica Excel, Google Sheets, Spark, Hadoop, MapReduce,   IDE(s)  Visual Studio, Eclipse, R Studio, Jupyter Studio, SQL Developer, Sublime, IntelliJ, Pycharm, Notebook++   SQL Databases  SQLite – database in a single file, simplified MySQL/Oracle/PostGreSQL/MS SQL Server – legacy, centralized, powerful, requires server/ MariaDB/ SQL Developer Access   SQL used to be standard but now one should ask if needed SQLite is local, so no centralized data need to run server    NoSQL databases Simpler, less powerful, cloud options available\n MongoDB - industry leader Firebase (Google) - easy for mobile apps Cassandra CouchDB - Good for highly distributed systems Dynamo DB – a NoSQL database from AWS TinyDB - a simple database with a clean API that just works without lots of configuration, works with Python 3.5+ and PyPy   Mongo and Firebase give small free allowance on cloud - get a database without running a server!    Data exploration tools  Tableau, PowerBI, Adobe Analytics, MicroStrategy, Google Analytics, Excel, R, Python, Matlab, Mathematica, SAP Analytics, Microsoft Paint Notebooks: Jupyter, Observable.js   Algorithms for advanced data exploration  Sorting algorithms – merge sort, quicksort, divide and conquer Search algorithms: linear, binary search Clustering: K means, nearest neighbor, Classification: linear regression, supervised/non supervised learning, Naïve Bayes, SVM, extremely random forests, binary classif, Pre-processing algorithms: MapReduce, Principal Component Analysis (PCA) Prediction algs: random forest, generalized linear model (GLM), regression algorithms - linear, logistic, Time series: ARIMA - Autoregressive Integrated Moving Average, and versions - 11 Time Series Forecasting Methods in Python cheat …","date":-62135596800,"description":"","objectID":"e53dd87c91a1981c86c41aab6f89732a","permalink":"https://ggc-dsa.github.io/dsacapstone-resources/student/chapter-intro/chapter-tech/","title":"Technology Overview"},{"content":"Project Management with JIRA ITEC 4230 Data Science and Analytics Project, Anca Doloc-Mihu and Cengiz Gunay (License: CC BY-SA 4.0)\n  Prev - Github Social Computing\n Project Management (PM) What is Project Management?\nProject management is the process of matching a project\u0026amp;rsquo;s goals, tasks, and resources to accomplish a goal considering also constrains like limited time, money, and resources (people and tools) with which to accomplish the goal.      Project Step 1: Defining the goals of the project  entire team must participate each team member must understand these goals step ends with a list of goals and a statement of success  Defining success is necessary to make sure there is no ambiguity as to whether the goal has been accomplished or not. It also prevents teams from performing unnecessary iteration and improvement on a goal which has been sufficiently accomplished.\n Project Step 2: Define project tasks/activities Each goal or sub-set of goals should be matched to the tasks required to accomplish them. Team should agree on the tasks that will define the success of each goal.\n   Project Step 3: Determine and verify resource requirements The most important here is to be realistic, meaning to determine what resources you need (like people, time, money, space, computers, software, etc.) to get the job done correctly, on time, and on budget.   Most common mistake is to underestimate the amount and type of resources required, which leads to projects that run over budget and fall behind schedule.  DO NOT: • Squeeze a project into a shorter time frame to please your boss • Cut corners to minimize resource requirements • Plan on a best-case basis, i.e. \u0026amp;ldquo;If everything goes correctly, we will finish on time.\u0026amp;rdquo;\n  A good idea is to build in a safety margin of 20% in terms of time and budget, which will give additional time to deal with unexpected occurrences.    Once the requirements have been set, it is important to make sure that the team has access to …","date":-62135596800,"description":"","objectID":"2f2461324e23907d9fec30e27b95ae90","permalink":"https://ggc-dsa.github.io/dsacapstone-resources/student/chapter-jira/","title":"Project Management with JIRA"},{"content":"Team Roles and Presentation Checklist    Team manager section:\n  Brief recap of your client\u0026#39;s vision\n  In Agile philosophy, people come before tools. How does your team\u0026#39;s existing skills and future goals align with the project scope?\n  What were your brief list of requirements and how did you turn these into user stories?\n  What\u0026#39;s your plan for the semester? Outline it roughly, but tell us exactly what\u0026#39;s going into your 1st iteration/sprint and when do you plan to finish it to show it to the client. 1st iteration must be one month or shorter.\n  Here\u0026#39;s an example: GGRA project , video\n  Code Architecture section:\n  Justification and rationale for picking your platform/language/framework.\n  A diagram that shows different components of your project and how they relate\n  Folder structure that all your team members agreed to follow\n  Major code components (classes, files, controllers, etc)\n  Some details of the coding that is coming up\n  Here\u0026#39;s an example: CodeArchitecture.pptx, video\n  Optional:\n  IDE choice\n  Code style (spacing, naming, etc)\n  Any other relevant information\n  UI Designer section:\n  Explain existing interface and proposed changes, or show ideas/sketches for new design\n  Graphical representation of your UI, could be a mock (use Moqups, Proto.io, UXpin, Marvel, JustInMind, etc.)\n  Choose a state or activity diagram to show us the different views and the routes between them\n  Principles of organization that your teammates will follow to make UI elements\n  Planned future directions\n  Any other relevant information\n  Here\u0026#39;s an example: UserInterfacedesignv2.pptx, video\n  Data Model role section:\n  A class or entity-relationship diagram that shows different data components\n  Database engine, file format, code data structures, or any other way you incorporate data into your project and rationale why that was selected.\n  Flesh out the details of how the data is going to be accessed (files, scripts, functions)\n  Any other relevant information\n  Here\u0026#39;s an …","date":1603121175,"description":"Project Design and Management","lastmod":"2020-12-20T15:26:15Z","objectID":"de7170a50a9454767df0b7ac2326fa9b","permalink":"https://ggc-dsa.github.io/dsacapstone-resources/student/chapter-project-design/","publishdate":"2019-11-23T15:26:15Z","title":"Project Design and Management"},{"content":"   Grading Criteria    Max Pts Grade item     100 Total student grade w/o bonus   125.33 Total student grade w bonus    Team scores will be posted below. Individual grades will be submitted privately in the D2L grades section. They are calculated the same way as in Requirements Phase:\n total individual grade = base grade + team score \u0026amp;times; individual effort percent\n  30 Base points 30 Individual effort multiplier 70 Team presentation/work    5 Selected tool/article 10 Git commits 5 Client partially functional demo  10 US and tasks progress updated 5 Process tool activity 5 Screencast of demo  10 Coding contribution 5 Other comm 10 Project and code progress  5 Time logging 10 Peer review 10 Iterations and USs updated      10 Client communication  10 Base bonus 2 Bonus effort 5 Iteration plan validated  5 Testing contribution 2 Extra effort 5 Client satisfaction  5 Documentation contribution   5 License/IP       5 Burndown      5 CREATE abstract      5 Demo aligned with requirements             10 Bonus project score      5 README with up-to-date links      5 Other    \n  ","date":1603121175,"description":"Data Cleaning and Hypothesis Formulation Phase","lastmod":"2020-12-20T15:26:15Z","objectID":"a538bfe2fc009626f1a15bea160ed135","permalink":"https://ggc-dsa.github.io/dsacapstone-resources/student/chapter-project-design/client-checkpoint-phase/","publishdate":"2019-11-23T15:26:15Z","title":"Data Cleaning and Hypothesis Formulation Phase"},{"content":"   Deliverables In the final phase of this semester, you will have these main deliverables:\n App Factory Demos to outside of class people (usually during a symposium on campus/online in the last week of semester) Final team technical presentation in class (during last week of classes)  Demo deliverables (due TBA): Submit these on the forum post as a reply:\n  Project flyer: description of functionality with screenshots; include a single letter-size (11\u0026#34;x8.5\u0026#34;) page flyer in PNG format that has a screenshot or artwork and message to be the flash card for your product (see examples from previous semesters at https://soft-eng-practicum.github.io/ )\n  Intellectual property agreement signed by all team members and client (don\u0026#39;t post on repo, put it on Reddit)\n  App Factory Demo user testing survey draft - should be couple of questions specific to your project because I will give a second survey with generic questions (see example 1 and example 2)\n Provide a short screencast demoing your product live (prefer a screen recorder with voiceover rather than a hand-held camera). This will be a public video, don\u0026#39;t show private information that you don\u0026#39;t want to share. Upload it to Youtube and provide a link. (see examples from previous semesters at https://soft-eng-practicum.github.io/ )  Final technical presentation (due TBA) and report submission (due TBA) Post these on the forum:\n In-class presentation file. In your presentation file, make sure to include links for the live product/download/etc if they apply. Make sure they are shareable! See below to see what goes into the presentation. If you don\u0026#39;t want to post your presentation publicly, you can password-protect it. But don\u0026#39;t forget to post that password. Report, including signed agreement/license, screencast video (upload to Youtube and provide link), user testing results from App Factory. Report can be uploaded to your repo.  Emails that need to be sent out:\n All project materials including final deployment to client - …","date":1603121175,"description":"Final Phase - Dynamic Visualization","lastmod":"2020-12-20T15:26:15Z","objectID":"9fa1d47e0966797833660b081a0a6f16","permalink":"https://ggc-dsa.github.io/dsacapstone-resources/student/chapter-project-design/last-stretch-phase/","publishdate":"2019-11-23T15:26:15Z","title":"Final Phase - Dynamic Visualization"},{"content":"   Grading Criteria    Max Pts Grade item     100 Total student grade   130 Total student grade with bonus    Individual grades and its bonus sum together, and the team points are MULTIPLIED by effort percent of the individual. They will be submitted privately in the D2L grades section. They are calculated tentatively as follows:\n total individual grade = base grade + team score \u0026amp;times; individual effort percent\n    50 Base points 25 Individual effort multiplier 50 Team score     10 Role markdown 10 Peer review 5 Meeting summary in repo and validated by client   15 2x role presentations 5 Github commits 2 Team name   5 Release waivers 5 Task tracking 5 Team markdown   10 Feedback for presentations 5 Communication (Slack/Discord) 5 Client feedback for mockup   10 User story (estimate, tasks, assigned)   5 Client communications     \u0026amp;nbsp; \u0026amp;nbsp; \u0026amp;nbsp; 8 1st iteration plans tracked     2 Bonus effort 5 User stories in backlog     2 Extra effort 12 All role presentations   10 Base bonus   3 Vlogs/presentations submitted   5 Voting for best presentations       5 Comments in tasks   10 Bonus project score       5 (bonus) for best project(s)       5 extra stuff      ","date":1603121175,"description":"Requirements Phase includes understanding the project, select project roles, starting a repo fo project, build project charter/plan, select technologies, data collection and first draft of hyphotesis.","lastmod":"2020-12-20T15:26:15Z","objectID":"d19dd391f25e6982cb6dd7e5d707e933","permalink":"https://ggc-dsa.github.io/dsacapstone-resources/student/chapter-project-design/requirements-phase/","publishdate":"2019-11-23T15:26:15Z","title":"Planning and Data Collection Phase"},{"content":"Requirements in Agile ITEC 4230 Data Science and Analytics Project, Anca Doloc-Mihu and Cengiz Gunay (License: CC BY-SA 4.0)\n  Prev - Kanban, Next - User Stories \nSome slides courtesy of Joan Smith, Eugene Agichstein, and the Internets.\n What is a Requirement? Requirements are the descriptions of the services provided by a system and its operational constraints  * It is about WHAT not HOW  * It varies greatly. It may range from a high level abstract statement to a detailed mathematical specification  * It may be as complex as a 500 pages of description     Why we need requirements? Advantages of a complete set of documented requirements\n* Ensures the user (not the developer) drives system functionalities  * Helps avoiding confusion and arguments  * Helps minimizing the changes which reduces the cost  Changes in requirements are expensive.   Costs of changing the requirements 3 x as much during the design phase  5-10 x as much during implementation  10-100 x as much after release Code Complete, p30\n  Requirements help reduce errors A careful requirements process doesn’t mean there will be no changes later\nAverage project experiences about 25% changes in the requirements\n This accounts for 70-80% if the rework of the project Code Complete, p40\n Important to plan for requirements changes\n Example: the case of critical applications   Different levels of abstraction Abstract level: User requirements\n* Usually the first attempt for the description of the requirements * Includes services and constraints of the system * Given in natural language or diagrams * Readable by everybody, i.e. understandable by the user * Serve business objectives  Example of User requirement: As a user who found a new job announcement, I want to add a new position to the website so s/he can start working on doing the initial research and apply to it.\n  Different levels of abstraction Not abstract level: System requirements\n* Includes services and constraints of the system in detail * Useful for …","date":-62135596800,"description":"","objectID":"01729c77575845de382e80ebc5b9f9ca","permalink":"https://ggc-dsa.github.io/dsacapstone-resources/student/chapter-requirements/","title":"Requirements in Agile"},{"content":"Teamwork ITEC 4230 Data Science and Analytics Project, Anca Doloc-Mihu and Cengiz Gunay (License: CC BY-SA 4.0)\n  Prev - User Stories, Next - Visualization \n Agile Principles lead to Teamwork The agile process molds to the needs of the people and team\n4. Work Together. Business people and developers must work together daily throughout the project (one team).\n 5. Empower \u0026amp;amp; Trust. Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done.\n 6. Face to Face Conversations. The most efficient and effective method of conveying information to and within a development team is face–to–face conversation.\n 11. Self-organizing Teams. The best architectures, requirements, and designs emerge from self–organizing teams.\n 12. Reflect \u0026amp;amp; Adjust. At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly.\n  Scrum and Agile Scrum is the most popular agile framework.\nScrum fulfils the vision of the Agile Manifesto by helping individuals and businesses organize their work to\n maximize collaboration, minimize errors, deliver frequently, and create multiple opportunities to inspect and adapt.    Scrum Team People are the focus of Scrum.\nScrum Teams include people with diverse skillsets; each team has all of the capabilities necessary to deliver a piece of functionality from idea to delivery.  The CLIENT is part of the TEAM\n The TEAM is in control of the work performed\n  Scrum Team Scrum Team includes three roles: Scrum Master, Product Owner, and Development Team.\nThe Scrum Master helps the Scrum Team perform at their highest level. They also protect the team from both internal and external distractions. Scrum Masters hold the Scrum Team accountable to their working agreements, Scrum values, and to the Scrum framework itself.\n The Product Owner defines the what\u0026amp;ndash;as in what the product will look like and what features it should contain. Product …","date":-62135596800,"description":"","objectID":"3ec90445a0593eb03a6d3d0e9fcd6d88","permalink":"https://ggc-dsa.github.io/dsacapstone-resources/student/chapter-requirements/chapter-teamwork/","title":"Teamwork"},{"content":"User Stories ITEC 4230 Data Science and Analytics Project, Anca Doloc-Mihu and Cengiz Gunay (License: CC BY-SA 4.0)\n  Prev - Requirements in Agile, Next - Teamwork \n User Stories in Agile * The Agile process is driven by customer descriptions of what is required (user scenarios)  * Agile Planning begins with the creation of user stories  * User Stories are the central focus for developers  * User Stories are derived from user/client meeting and describe how the product will be used in very specific ways\n * They are derived from user scenarios and tell WHO can do WHAT and WHY  * Analogous to functional requirements  * Act as guidelines on how to plan for testing the product   User Stories in Agile * Agile team assesses each story and assigns a cost\n * Stories are grouped for a deliverable increment  * Complexity of a user story is estimated in Story Points. Story points estimate the relative complexity of satisfying the requirement.  * Each user story should imply an acceptance test  * Coding: Recommends the construction of a unit test for a story before coding starts  * A commitment is made on a delivery date for all the stories of the deliverable increment  * User stories should be recorded in virtual or physical cards placed on the team\u0026#39;s working board   Examples of User Story                       Examples taken from http://www.westborosystems.com/2010/02/user-story-examples/\n User Story might get history during the development    Initial Final               How to classify each story   Team must decide upon the criteria on which to classify each story.\n  Then, team must select a way to record the story using these criteria\n  Example: I.N.V.E.S.T.\nI – independent, not requiring other features\nN – negotiable, can be excluded, revised, etc\nV – valuable, clearly contributing to product usefulness\nE – estimable, reasonable development estimates can be made from the story\nS – small, stories that are too big tend to be vague and miss some points\nT – testable, stories …","date":-62135596800,"description":"","objectID":"ba9b60dfdb6db23d03e8a8179b571438","permalink":"https://ggc-dsa.github.io/dsacapstone-resources/student/chapter-requirements/chapter-userstories/","title":"User Stories"},{"content":"Version Control ITEC 4230 Data Science and Analytics Project, Anca Doloc-Mihu and Cengiz Gunay (License: CC BY-SA 4.0)\n  Prev - Visualization, Next - Github Social Computing \n Why Version Control?  It\u0026amp;rsquo;s a must in today\u0026amp;rsquo;s computing industry  Mt. Gox, a company that don\u0026amp;rsquo;t use VC and lost almost a billion dollars… Another painful story without VC challenge: find more horror stories!   You can even version control documents, class files, financial files, … Also called source control, code management, concurrent versioning, revision control, …  Advantages:\n Track changes, keep logs of past development Automatic backups/safety net Concurrent versions: XP vs. Win8 Allows teamwork    Teamwork on the same codebase: How? Seriously, how?   Teamwork: No control? Overwrite chaos!    Teamwork: Locking    Teamwork: Merging    Merging example    Each commit increments version   \n Github for version control     \n       git is the program behind Github Common usage scenario:\n git clone gets working copy from repo Make changes in local working copy git add \u0026amp;lt;files...\u0026amp;gt; to select your changed files git commit saves your changes into the version control history with a comment (Wash, rinse, and repeat step 2. Commit often!) git push publishes your previous commits to remote repository (Github) git pull receives latest changes from repo to sync   Useful commands: Investigating the past  git diff shows your changes from last repo version git log [filename] lists all commits, optionally those touching a filename git diff \u0026amp;lt;commit\u0026amp;gt; shows changes in version labeled as \u0026amp;lt;commit\u0026amp;gt; git checkout \u0026amp;lt;commit\u0026amp;gt; rewinds all files back to a version  Challenge: How to find a bug  You have been messing with the code Suddenly you realized you broke the program How do you find when was the bug introduced?    Hint: use git checkout \u0026amp;lt;commit\u0026amp;gt;\n    Common issues with Git Avoiding bloating and conflict hell:\n The .gitignore file: Add lines of file patterns to be kept out …","date":-62135596800,"description":"","objectID":"17aeffb5f3818ad789d2b0335cde19ce","permalink":"https://ggc-dsa.github.io/dsacapstone-resources/student/chapter-version-control/","title":"Version Control"},{"content":"Github Social Computing ITEC 4230 Data Science and Analytics Project, Anca Doloc-Mihu and Cengiz Gunay (License: CC BY-SA 4.0)\n  Prev - Version Control, Next - Project Management with JIRA \n ","date":-62135596800,"description":"","objectID":"de98cdc066fba8ed9e080f3aa10348e8","permalink":"https://ggc-dsa.github.io/dsacapstone-resources/student/chapter-version-control/github-social-computing/","title":"Github Social Computing"},{"content":"Visualization ITEC 4230 Data Science and Analytics Project, Anca Doloc-Mihu (License: CC BY-SA 4.0)\n  Prev - Teamwork, Next - Version Control \n What is Visualization? Visualization or visualisation is any technique for creating images, diagrams, or animations to communicate a message. Wikipedia  * Visualization through visual imagery has been an effective way to communicate both abstract and concrete ideas since the dawn of humanity.  * Examples from history include cave paintings, Egyptian hieroglyphs, Greek geometry, and Leonardo da Vinci\u0026#39;s revolutionary methods of technical drawing for engineering and scientific purposes.            What is Visualization? Data visualization (often abbreviated data viz) is an interdisciplinary field that deals with the graphic representation of data.\nIt is an efficient way of communicating when the data is numerous as for example a Time Series.\n It builds a mapping between the original data (usually numerical) and graphic elements (for example, lines or points in a chart) to show visually how the attributes of these elements vary according to the data.\n It is generally considered a branch of Descriptive Statistics, and it is argued by some authors that it is both an Art and a Science.      Why is Visualization so important?  “At their best, graphics are instruments for reasoning about quantitative information. Often the most effective way to describe, explore, and summarize a set of numbers is to look at pictures of those numbers.”  Edward R. Tufte, Ph.D., Professor Emeritus, Yale University, Author of [The Visual Display of Quantitative Information](https://www.edwardtufte.com/tufte/books_vdqi)   “A picture is worth a thousand words\u0026#34;  is an English language adage meaning that complex and sometimes multiple ideas can be conveyed by a single still image, which conveys its meaning or essence more effectively than a mere verbal description.\n[Wikipedia](https://en.wikipedia.org/wiki/A_picture_is_worth_a_thousand_words)    NASA - …","date":-62135596800,"description":"","objectID":"35c42895d00315c8157c965704f549dc","permalink":"https://ggc-dsa.github.io/dsacapstone-resources/student/chapter-visualization/","title":"Visualization"}]