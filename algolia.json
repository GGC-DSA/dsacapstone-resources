[{"content":"Welcome! We are still adding materials. Select a chapter from the menu on the left.\n","date":1508426775,"description":"Home page","lastmod":"2019-10-26T15:26:15Z","objectID":"3976528693a0108357f4928017600865","permalink":"https://soft-eng-practicum.github.io/softdev2-resources/","publishdate":"2018-11-23T15:26:15Z","title":"Home"},{"content":"This site contains a collection of lectures, assignments, and instructor materials for teaching software engineering or development, at an intermediate level. It is assumed that students already know basic software engineering terms and skills.\nMaterials are used for the ITEC 3870 Software Development II course taught at Georgia Gwinnett College . They were developed by Cengiz Gunay and Anca Doloc-Mihu , supported by an Affordable Learning Georgia grant in 2019-2020.\nSome materials are courtesy of Joan Smith, Eugene Agichstein, and the Internets. Slides are offered with the license: CC BY-SA 4.0 .\nTo modify and use these materials in your classes, fork the Github repository or use the edit link at the bottom right of each page.\n","date":1508426775,"description":"About this Site","lastmod":"2019-10-26T15:26:15Z","objectID":"6083a88ee3411b0d17ce02d738f69d47","permalink":"https://soft-eng-practicum.github.io/softdev2-resources/about/","publishdate":"2018-11-23T15:26:15Z","title":"About this Site"},{"content":"Select a chapter from the menu.\n","date":1603121175,"description":"Instructor Materials","lastmod":"2020-12-20T15:26:15Z","objectID":"9e6a1416d4bf7d2fcfc2765ce90e972f","permalink":"https://soft-eng-practicum.github.io/softdev2-resources/instructor/","publishdate":"2019-11-23T15:26:15Z","title":"Instructor Materials"},{"content":"Exams There are two take-home exams during the semester, each with weight of 10 pts of the fnal grade. See next for the exam questions.\n","date":1603121175,"description":"Exams","lastmod":"2020-12-20T15:26:15Z","objectID":"326e4c3e83433151edcdc7fadb35e00d","permalink":"https://soft-eng-practicum.github.io/softdev2-resources/instructor/exams/","publishdate":"2019-11-23T15:26:15Z","title":"Exams"},{"content":"Syllabus Example Syllabus which includes learning outcomes, textbook, schedule and details about the course organization.\nParts that instructor needs to change to his/her own data are emphasized in yellow.\nDownload pdf of Syllabus here. Download word doc of Syllabus here. ","date":1603121175,"description":"Syllabus","lastmod":"2020-12-20T15:26:15Z","objectID":"b2f86f27774e23dbabb3730258e30928","permalink":"https://soft-eng-practicum.github.io/softdev2-resources/instructor/exams/final/","publishdate":"2019-11-23T15:26:15Z","title":"Syllabus"},{"content":"Midterm Instructions:\n  Recommended work time 180 minutes.\n  Students can leave the work, save it, and return later to pick up where they left.\n  Total points 50 (100%).\n   Q1: Agile Methodology (10 pts) During the last decade, Agile Methodology has become a very popular software process model, which is supported by the State of the Agile report.\nPart (A) (5pts)\n A1. (3pts) Based on the data in this report (read 14th version), what are the top 3 features of Agile that are different from the traditional software engineering approach and make it so popular? Justify your selections by giving reasons.\n A2. (2pts) Research and list 3 weaknesses of Agile you think makes it less desirable. Your answers must cite numbers/info in the latest State of the Agile Survey by Version One that you can find under Contents\u0026amp;gt;Resources-\u0026amp;gt;Agile (read 14th version).\n Part (B) (5pts)\n B1. (2pts) Explain why you think Agile is (or is not) an appropriate process model for your class team project. Construct a convincing argument that includes whether stand-up meetings, sprint planning, user stories, and retrospectives are useful, and whether other Agile features are useful for your team.\n B2. (3pts) Create two semester-long development plans for your current project: one using a Waterfall model, and another one using an Agile model, and then compare the two.\n  ","date":1603121175,"description":"Midterm","lastmod":"2020-12-20T15:26:15Z","objectID":"d95635c63bd499c0f495b3f5806a0170","permalink":"https://soft-eng-practicum.github.io/softdev2-resources/instructor/exams/midterm/","publishdate":"2019-11-23T15:26:15Z","title":"Midterm"},{"content":"Grading overview The overall ratio is about half between individual and project work (with bonus points):\n   Percent Grade category     10% Presentations (Article Reading + Software Tool) \u0026amp;amp; lab session attendance   15% Small individual assignments (including team formation and project selection)   5% In-class quizzes   20% Take-home mid-term and final exams (10% each)   50% Team Project, includes individual and team components:    Team peer review (multiple times)    Individual Role Presentation \u0026amp;amp; Execution    Individual Team/Client Communication    Proper and efficient use of Version Control    Waterfall steps of requirements, design, implementation, and testing    Team Release \u0026amp;amp; Demo Plans and Execution    Team Documentation \u0026amp;amp; Delivery Report    ","date":1603121175,"description":"Gradebook","lastmod":"2020-12-20T15:26:15Z","objectID":"13b75dfddc354d97474fe3b0aad68e8b","permalink":"https://soft-eng-practicum.github.io/softdev2-resources/instructor/gradebook/","publishdate":"2019-11-23T15:26:15Z","title":"Gradebook"},{"content":"Week#ModuleSetupTopicHands-onAssignment    // Schedule as JSON var modules = [ {name: \u0026#34;Semester overview and re-introduction to software engineering\u0026#34;, setup: \u0026#34;Initialize LMS, archive and clear discussion area, post syllabus, post intro slides, set up entry quiz, make discussion posts for welcome message, Message in a Bottle, and Introductions. Post project ideas and potential clients.\u0026#34;, topic: \u0026#34;Intro slides. Warning about self work. Go over success tips on LMS.\u0026#34;, handson: \u0026#34;Entry quiz, answer the questions, and post resume.\u0026#34;, module: 1, assignment: \u0026#34;Post introductory resumes. Regiser with version control (Github) and chat/forum services (Discord, Reddit). Vote for project ideas.\u0026#34;, days: 7}, {name: \u0026#34;Technology overview, project/team selection, and requirements\u0026#34;, setup: \u0026#34;Add everyone to LMS/version control/chat/discussion services. Post hackathon and local meetup schedules. Post requirements and Git lecture slides. Create team chat channels and code repositories with master branch force push protection.\u0026#34;, topic: \u0026#34;Explain shortcut links on LMS for chat and discussion. Brief introduction to tools (e.g., Discord usage and channels).\u0026#34;, handson: \u0026#34;Introduce and start assignment in class.\u0026#34;, module: 1, assignment: \u0026#34;Git+bash assignment; client meetings, read on Git and requirements.\u0026#34;, days: 7}, {name: \u0026#34;Markdown, team roles, technology overview\u0026#34;, setup: \u0026#34;Post assignments and role presentation details on LMS. Schedule attending external meetup/hackathon event.\u0026#34;, topic: \u0026#34;Announce project deadlines. Project setup help. Explain communication grading.\u0026#34;, handson: \u0026#34;assignment, project set up, markdown\u0026#34;, module: 1, assignment: \u0026#34;Post team roles in Markdown README and Git branching homework. Read about Agile. Sign release waivers.\u0026#34;, days: 7}, {name: \u0026#34;Agile development, user stories, JIRA\u0026#34;, setup: \u0026#34;post 1st iteration presentation deadline, and two JIRA assignments. Invitations for registering into JIRA, create JIRA project for practice assignment and one for each team. Add team managers as …","date":1603121175,"description":"Schedule","lastmod":"2020-12-20T15:26:15Z","objectID":"d047b671a88d2c4437317d9fb74b8e91","permalink":"https://soft-eng-practicum.github.io/softdev2-resources/instructor/schedule/","publishdate":"2019-11-23T15:26:15Z","title":"Schedule"},{"content":"Syllabus Example Syllabus which includes learning outcomes, textbook, schedule and details about the course organization.\nParts that instructor needs to change to his/her own data are emphasized in yellow.\nDownload pdf of Syllabus here. Download word doc of Syllabus here. ","date":1603121175,"description":"Syllabus","lastmod":"2020-12-20T15:26:15Z","objectID":"2dbf0565756b6df943a700c93c819e80","permalink":"https://soft-eng-practicum.github.io/softdev2-resources/instructor/syllabus/","publishdate":"2019-11-23T15:26:15Z","title":"Syllabus"},{"content":"Select a chapter from the menu.\n","date":1603121175,"description":"Student Materials","lastmod":"2020-12-20T15:26:15Z","objectID":"d9abbfdff770a90a77fcbeafefb538ab","permalink":"https://soft-eng-practicum.github.io/softdev2-resources/student/","publishdate":"2019-11-23T15:26:15Z","title":"Student Materials"},{"content":"Agile Development ITEC 3870 Software Development II, Anca Doloc-Mihu and Cengiz Günay (License: CC BY-SA 4.0)\n   Agile Process The current standard for software development\n Waterfall  = sequential assembly line   What is wrong with Waterfall?   In 1990s, software industry abandoned waterfall-style development and introduced AGILE\n  Manifesto for Agile Software Development \u0026amp;ldquo;We are uncovering better ways of developing software by doing it and helping others do it. Through this work we have come to value:\n Individuals and interactions  over processes and tools Working software  over comprehensive documentation Customer collaboration  over contract negotiation Responding to change  over following a plan  That is, while there is value in the items on the right, we value the items on the left more.”\nKent Beck et al\n Agile Statistics The 14th annual STATE of AGILE Report, 2020\n   Agile Statistics The 14th annual STATE of AGILE Report, 2020\n   Agile Statistics The 14th annual STATE of AGILE Report, 2020\n   Agile Statistics The 14th annual STATE of AGILE Report, 2020\n   Agile Statistics The 14th annual STATE of AGILE Report, 2020\n   ","date":-62135596800,"description":"","objectID":"10982256fb9e8de7109341557b86ee00","permalink":"https://soft-eng-practicum.github.io/softdev2-resources/student/chapter-agiledevelopment/","title":"Agile Development"},{"content":"Kanban ITEC 3870 Software Development II, Anca Doloc-Mihu and Cengiz Günay (License: CC BY-SA 4.0)\n   Kanban Kanban is a management method helping teams to visualize their work to understand it better, which helps to identify and eliminate bottlenecks, and maximise efficiency (flow). It is the Japanesse word for visual signal. The original author of Kanban was Taiichi Ohno and it was used by Toyota for the first time.\nA Kanban Board keeps everyone in the team on the same page.\n Teams build a Kanban board filled with Kanban cards and set up a work flow limit.\n    Kanban cards One Kanban card per user story, which means one card per work item.\nThe size of the work item should not be either too small or too big.  Cards should have:\n title, description, owner, any other helpful information like due date   As card moves on the board from left to right on the stage of the workflow, the card gets some history (i.e., messages from the teammates).\n Kanban cards should be small enough such that team makes progress on them in a reasonable amount of time.\n  Kanban work flow   Work flow: cards moving from left to right\n Benefits of Kanban board  reveals bottlenecks in workflow (cards not moving forward)    get a sense of the size of the cards team can move forward in a timely matter    a visual assurance that the work is done    Measuring workflow lead time = the time it takes a card to move from the backlog to finish on the board\nIn agile, if values are combined with Kanban characteristics, the outcome would be Agile Kanban. This practice is gaining popularity in Software Developmement, and it means that the Agile iteration approach and Kanban value stream focus are combined.\n","date":-62135596800,"description":"","objectID":"2e15fc0e429e9259bc9f4e4d5a244481","permalink":"https://soft-eng-practicum.github.io/softdev2-resources/student/chapter-agiledevelopment/chapter-kanban/","title":"Kanban"},{"content":"Agile Principles ITEC 3870 Software Development II, Anca Doloc-Mihu and Cengiz Günay (License: CC BY-SA 4.0)\n What is \u0026amp;ldquo;AGILITY\u0026amp;rdquo;? Effective (rapid and adaptive) response to change  Effective (rapid and adaptive) communication among all stakeholders  The CLIENT is part of the TEAM  The TEAM is in control of the work performed   resulting in \nrapid, incremental delivery of software\n  Agile Process  User Scenarios are descriptions of what is required (requirements) and drive the entire production process    Plans are short-lived and can change frequently    Software is developed iteratively and is delivered after each iteration    Adapts as changes occur    Agile is based on 4 values and  12 principles   Agile Values  Individuals and interactions over processes and tools   Working software over comprehensive documentation   Customer collaboration over contract negotiation   Responding to change over following a plan    Agile Principles  Satisfy the Customer  Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.\n Welcome Change  Welcome changing requirements, even late in development. Agile processes harness change for the customer\u0026amp;rsquo;s competitive advantage.\n Deliver Solutions Frequently  Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale.\n  Agile Principles Work Together  Business people and developers must work together daily throughout the project (one team).\n Empower \u0026amp;amp; Trust  Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done.\n Face to Face Conversations  The most efficient and effective method of conveying information to and within a development team is face–to–face conversation.\n  Agile Principles Working Solutions  Working software solutions are the primary measure of progress.\n Sustainable Pace  Agile processes promote sustainable …","date":-62135596800,"description":"","objectID":"3361e5f40a770cb713abc67c0df8a57b","permalink":"https://soft-eng-practicum.github.io/softdev2-resources/student/chapter-agiledevelopment/chapter-principles/","title":"Agile Principles"},{"content":"Scrum ITEC 3870 Software Development II, Anca Doloc-Mihu and Cengiz Günay (License: CC BY-SA 4.0)\n   Scrum * Originally proposed by Jeff Sutherland in 90s, then improved by Schwaber and Beedle  * In 1993, J. Sutherland borrowed term ‘scrum’ from Takeuchi and Nonaka, “The New Product Development Game”, Havard Business Review, 1986  * Takeuchi and Nonaka compare high-performing, cross-functional teams to the scrum formation used by Rugby teams.     Scrum * In rugby scrum is the power struggle between two teams to advance on the field  * It requires complete team work, hard work, and strength. That meaning translates to software development    See original article from Scrum Alliance\n Scrum and Agile Scrum is one of several agile frameworks.  Scrum is the most popular agile framework.\n    Scrum Definition Scrum: An [agile] framework within which people can address complex adaptive problems, while productively and creatively delivering products of the highest possible value.\nScrum refers to a lightweight framework that is used in every industry to deliver complex, innovative products and services that truly delight customers. It is simple to understand, but difficult to master.  Scrum fulfils the vision of the Agile Manifesto by helping individuals and businesses organize their work to\n maximize collaboration, minimize errors, deliver frequently, and create multiple opportunities to inspect and adapt.   Scrum Guide, November 2017 version\n How Scrum works Scrum works by delivering large projects in small chunks of the product that a team can begin and complete in one, short timeboxed iteration called sprint.\nScrum is also both iterative and incremental.   Scrum Framework People are the focus of Scrum.\nScrum Teams include people with diverse skillsets; each team has all of the capabilities necessary to deliver a piece of functionality from idea to delivery.  Sprint is a short (one to four weeks long) timeframe during which the team works on some chunks of the product. …","date":-62135596800,"description":"","objectID":"d4f93296160149860fba04ae846614f6","permalink":"https://soft-eng-practicum.github.io/softdev2-resources/student/chapter-agiledevelopment/chapter-scrum/","title":"Scrum"},{"content":"Re-introduction to Software Engineering ITEC 3870 Software Development II, Anca Doloc-Mihu and Cengiz Günay (Some slides courtesy of Joan Smith, Eugene Agichstein, and the Internets. License: CC BY-SA 4.0)\n  \n Welcome  What\u0026amp;rsquo;s better than to start the semester with a quiz?  Logistics heads-up:\n Using Reddit/Piazza for forum discussion and Q\u0026amp;amp;A support Sections 1 \u0026amp;amp; 2 are separate, but follow same content Using Discord and Github organizations with previous members Everything online this semester, will meet on live video on Discord   Meaning:\n Bigger community, can see what others are doing Can see results of their research, answers to questions Can even collaborate with projects? Any problems, potential issues?    Meet your instructor Instructor: Dr. Cengiz Gunay\nSoft-Eng-Practicum Github Organization\nEmail: cgunay@ggc.edu\nOffice: Virtual and W-2117 (by appointment)\nPhone: 678-951-9621 (also GroupMe)\n About the instructor: Dr Cengiz Gunay  Self-taught programmer In elementary school, started programming with an Atari 800XL  In high school, won programming competition with word puzzle game In college (\u0026amp;lsquo;96), published PC video game called “Legends of Istanbul”  In 2003, got a PhD in Computer Science on neural networks 2004–15, worked as post-doctoral fellow at Emory Univ. on simulating models of biological neurons and large-scale biological data mining (e.g., SQL, neural nets, genetic algos) 2012–15, Visiting Faculty teaching at Emory Univ., Math \u0026amp;amp; CS Dept. Fall 2015–present, IT faculty at GGC with Soft Dev focus and also helped start a Data Science and Analytics major   Your turn!  Login/register on discussion and respond to the “Introductions” topic; create an inline resume  Also quickly introduce yourself now in class!\n Name Major/Year Interest/experience in programming    What\u0026amp;rsquo;s happening? Welcome Soft Dev 1 students\n Projects, working with external clients (mostly GGC faculty/students) 3 phases of project work, peer review in each with …","date":-62135596800,"description":"","objectID":"080b37ae39eb6a14aeb12b2b9b918708","permalink":"https://soft-eng-practicum.github.io/softdev2-resources/student/chapter-intro/","title":"Re-introduction to Software Engineering"},{"content":"Career Advice and Technologies  ","date":-62135596800,"description":"","objectID":"0d8b6c4ef967253c279a6c1cf442efcd","permalink":"https://soft-eng-practicum.github.io/softdev2-resources/student/chapter-intro/career-advice-technologies/","title":""},{"content":"Technology Overview ITEC 3870 Software Development II, Anca Doloc-Mihu and Cengiz Günay (License: CC BY-SA 4.0)\n Popular Javascript web frameworks Major players; require Node.js on the server\n Angular (Typescript) - a full framework, supported by Google React (JSX) - only a library. Invented by Facebook, but open source now Vue.JS (Javascript) - modeled by original Angular, independent and open source   Angular controlled by Google and may change, forces Typescript React needs other framework components Vue is youngest and less docs available    Non-JS web frameworks  Python  Django - Very extensive, open-source framework Flask - Minimal, light, open-source framework   C#  .Net Core - Controlled by Microsoft, but platform independent   Ruby on Rails - Open-source Ruby web framework, lost some steam recently PHP (legacy) – but good with new frameworks  Laravel - easy, video tutorials Yii - performant, but steep learning curve   Java  Java Server Faces (JSF) - Legacy Java Spring - similar to .Net, controlled by Oracle     Django comes with admin section. .Net Core: Heavily object-oriented, optional Angular for front-end. Very popular.    Mobile hybrid frameworks Hybrid: cross-platform (Android, iOS, …)\n Flutter (Dart) React Native (JSX, HTML, native) Ionic (Angular/React, HTML) – based on Cordova Xamarin (C#, XML, allows native code)   JSX is React\u0026amp;rsquo;s flavor of Javascript Xamarin requires to learn another XML    SQL Databases  No database SQLite – database in a single file, simplified MySQL/Oracle/PostGreSQL/MS SQL Server – legacy, centralized, powerful, requires server   SQL used to be standard but now one should ask if needed SQLite is local, so no centralized data need to run server    NoSQL databases Simpler, less powerful, cloud options available\n MongoDB - industry leader Firebase (Google) - easy for mobile apps Cassandra CouchDB - Good for highly distributed systems   Mongo and Firebase give small free allowance on cloud - get a database without running a …","date":-62135596800,"description":"","objectID":"e53dd87c91a1981c86c41aab6f89732a","permalink":"https://soft-eng-practicum.github.io/softdev2-resources/student/chapter-intro/chapter-tech/","title":"Technology Overview"},{"content":"Jira ITEC 3870 Software Development II, Anca Doloc-Mihu and Cengiz Günay (License: CC BY-SA 4.0)\n   Jira * Originally proposed by Jeff Sutherland in 90s, then improved by Schwaber and Beedle  * In 1993, J. Sutherland borrowed term ‘scrum’ from Takeuchi and Nonaka, “The New Product Development Game”, Havard Business Review, 1986  * Takeuchi and Nonaka compare high-performing, cross-functional teams to the scrum formation used by Rugby teams.     Scrum * In rugby scrum is the power struggle between two teams to advance on the field  * It requires complete team work, hard work, and strength. That meaning translates to software development    See original article from Scrum Alliance\n Scrum and Agile Scrum is one of several agile frameworks.  Scrum is the most popular agile framework.\n    Scrum Definition Scrum: An [agile] framework within which people can address complex adaptive problems, while productively and creatively delivering products of the highest possible value.\nScrum refers to a lightweight framework that is used in every industry to deliver complex, innovative products and services that truly delight customers. It is simple to understand, but difficult to master.  Scrum fulfils the vision of the Agile Manifesto by helping individuals and businesses organize their work to\n maximize collaboration, minimize errors, deliver frequently, and create multiple opportunities to inspect and adapt.   Scrum Guide, November 2017 version\n How Scrum works Scrum works by delivering large projects in small chunks of the product that a team can begin and complete in one, short timeboxed iteration called sprint.\nScrum is also both iterative and incremental.   Scrum Framework People are the focus of Scrum.\nScrum Teams include people with diverse skillsets; each team has all of the capabilities necessary to deliver a piece of functionality from idea to delivery.  Sprint is a short (one to four weeks long) timeframe during which the team works on some chunks of the product. …","date":-62135596800,"description":"","objectID":"2f2461324e23907d9fec30e27b95ae90","permalink":"https://soft-eng-practicum.github.io/softdev2-resources/student/chapter-jira/","title":"Project Management with JIRA"},{"content":"Requirements in Agile ITEC 3870 Software Development II, Anca Doloc-Mihu and Cengiz Günay (License: CC BY-SA 4.0)\n   Requirements in Agile * Originally proposed by Jeff Sutherland in 90s, then improved by Schwaber and Beedle  * In 1993, J. Sutherland borrowed term ‘scrum’ from Takeuchi and Nonaka, “The New Product Development Game”, Havard Business Review, 1986  * Takeuchi and Nonaka compare high-performing, cross-functional teams to the scrum formation used by Rugby teams.     Scrum * In rugby scrum is the power struggle between two teams to advance on the field  * It requires complete team work, hard work, and strength. That meaning translates to software development    See original article from Scrum Alliance\n Scrum and Agile Scrum is one of several agile frameworks.  Scrum is the most popular agile framework.\n    Scrum Definition Scrum: An [agile] framework within which people can address complex adaptive problems, while productively and creatively delivering products of the highest possible value.\nScrum refers to a lightweight framework that is used in every industry to deliver complex, innovative products and services that truly delight customers. It is simple to understand, but difficult to master.  Scrum fulfils the vision of the Agile Manifesto by helping individuals and businesses organize their work to\n maximize collaboration, minimize errors, deliver frequently, and create multiple opportunities to inspect and adapt.   Scrum Guide, November 2017 version\n How Scrum works Scrum works by delivering large projects in small chunks of the product that a team can begin and complete in one, short timeboxed iteration called sprint.\nScrum is also both iterative and incremental.   Scrum Framework People are the focus of Scrum.\nScrum Teams include people with diverse skillsets; each team has all of the capabilities necessary to deliver a piece of functionality from idea to delivery.  Sprint is a short (one to four weeks long) timeframe during which the team works on …","date":-62135596800,"description":"","objectID":"01729c77575845de382e80ebc5b9f9ca","permalink":"https://soft-eng-practicum.github.io/softdev2-resources/student/chapter-requirements/","title":"Requirements in Agile"},{"content":"Client Meeting ITEC 3870 Software Development II, Anca Doloc-Mihu and Cengiz Günay (License: CC BY-SA 4.0)\n   Client Meeting * Originally proposed by Jeff Sutherland in 90s, then improved by Schwaber and Beedle  * In 1993, J. Sutherland borrowed term ‘scrum’ from Takeuchi and Nonaka, “The New Product Development Game”, Havard Business Review, 1986  * Takeuchi and Nonaka compare high-performing, cross-functional teams to the scrum formation used by Rugby teams.     Scrum * In rugby scrum is the power struggle between two teams to advance on the field  * It requires complete team work, hard work, and strength. That meaning translates to software development    See original article from Scrum Alliance\n Scrum and Agile Scrum is one of several agile frameworks.  Scrum is the most popular agile framework.\n    Scrum Definition Scrum: An [agile] framework within which people can address complex adaptive problems, while productively and creatively delivering products of the highest possible value.\nScrum refers to a lightweight framework that is used in every industry to deliver complex, innovative products and services that truly delight customers. It is simple to understand, but difficult to master.  Scrum fulfils the vision of the Agile Manifesto by helping individuals and businesses organize their work to\n maximize collaboration, minimize errors, deliver frequently, and create multiple opportunities to inspect and adapt.   Scrum Guide, November 2017 version\n How Scrum works Scrum works by delivering large projects in small chunks of the product that a team can begin and complete in one, short timeboxed iteration called sprint.\nScrum is also both iterative and incremental.   Scrum Framework People are the focus of Scrum.\nScrum Teams include people with diverse skillsets; each team has all of the capabilities necessary to deliver a piece of functionality from idea to delivery.  Sprint is a short (one to four weeks long) timeframe during which the team works on some chunks …","date":-62135596800,"description":"","objectID":"f91ead9747d57f950854052ae114d40d","permalink":"https://soft-eng-practicum.github.io/softdev2-resources/student/chapter-requirements/chapter-client/","title":"Client Meeting"},{"content":"Communication ITEC 3870 Software Development II, Anca Doloc-Mihu and Cengiz Günay (License: CC BY-SA 4.0)\n   Communication * Originally proposed by Jeff Sutherland in 90s, then improved by Schwaber and Beedle  * In 1993, J. Sutherland borrowed term ‘scrum’ from Takeuchi and Nonaka, “The New Product Development Game”, Havard Business Review, 1986  * Takeuchi and Nonaka compare high-performing, cross-functional teams to the scrum formation used by Rugby teams.     Scrum * In rugby scrum is the power struggle between two teams to advance on the field  * It requires complete team work, hard work, and strength. That meaning translates to software development    See original article from Scrum Alliance\n Scrum and Agile Scrum is one of several agile frameworks.  Scrum is the most popular agile framework.\n    Scrum Definition Scrum: An [agile] framework within which people can address complex adaptive problems, while productively and creatively delivering products of the highest possible value.\nScrum refers to a lightweight framework that is used in every industry to deliver complex, innovative products and services that truly delight customers. It is simple to understand, but difficult to master.  Scrum fulfils the vision of the Agile Manifesto by helping individuals and businesses organize their work to\n maximize collaboration, minimize errors, deliver frequently, and create multiple opportunities to inspect and adapt.   Scrum Guide, November 2017 version\n How Scrum works Scrum works by delivering large projects in small chunks of the product that a team can begin and complete in one, short timeboxed iteration called sprint.\nScrum is also both iterative and incremental.   Scrum Framework People are the focus of Scrum.\nScrum Teams include people with diverse skillsets; each team has all of the capabilities necessary to deliver a piece of functionality from idea to delivery.  Sprint is a short (one to four weeks long) timeframe during which the team works on some chunks of …","date":-62135596800,"description":"","objectID":"f712b19a3831cd21d5025158307a9074","permalink":"https://soft-eng-practicum.github.io/softdev2-resources/student/chapter-requirements/chapter-communication/","title":"Communication"},{"content":"Teamwork ITEC 3870 Software Development II, Anca Doloc-Mihu and Cengiz Günay (License: CC BY-SA 4.0)\n   Teamwork * Originally proposed by Jeff Sutherland in 90s, then improved by Schwaber and Beedle  * In 1993, J. Sutherland borrowed term ‘scrum’ from Takeuchi and Nonaka, “The New Product Development Game”, Havard Business Review, 1986  * Takeuchi and Nonaka compare high-performing, cross-functional teams to the scrum formation used by Rugby teams.     Scrum * In rugby scrum is the power struggle between two teams to advance on the field  * It requires complete team work, hard work, and strength. That meaning translates to software development    See original article from Scrum Alliance\n Scrum and Agile Scrum is one of several agile frameworks.  Scrum is the most popular agile framework.\n    Scrum Definition Scrum: An [agile] framework within which people can address complex adaptive problems, while productively and creatively delivering products of the highest possible value.\nScrum refers to a lightweight framework that is used in every industry to deliver complex, innovative products and services that truly delight customers. It is simple to understand, but difficult to master.  Scrum fulfils the vision of the Agile Manifesto by helping individuals and businesses organize their work to\n maximize collaboration, minimize errors, deliver frequently, and create multiple opportunities to inspect and adapt.   Scrum Guide, November 2017 version\n How Scrum works Scrum works by delivering large projects in small chunks of the product that a team can begin and complete in one, short timeboxed iteration called sprint.\nScrum is also both iterative and incremental.   Scrum Framework People are the focus of Scrum.\nScrum Teams include people with diverse skillsets; each team has all of the capabilities necessary to deliver a piece of functionality from idea to delivery.  Sprint is a short (one to four weeks long) timeframe during which the team works on some chunks of the …","date":-62135596800,"description":"","objectID":"3ec90445a0593eb03a6d3d0e9fcd6d88","permalink":"https://soft-eng-practicum.github.io/softdev2-resources/student/chapter-requirements/chapter-teamwork/","title":"Teamwork"},{"content":"User Stories ITEC 3870 Software Development II, Anca Doloc-Mihu and Cengiz Günay (License: CC BY-SA 4.0)\n   User Stories * Originally proposed by Jeff Sutherland in 90s, then improved by Schwaber and Beedle  * In 1993, J. Sutherland borrowed term ‘scrum’ from Takeuchi and Nonaka, “The New Product Development Game”, Havard Business Review, 1986  * Takeuchi and Nonaka compare high-performing, cross-functional teams to the scrum formation used by Rugby teams.     Scrum * In rugby scrum is the power struggle between two teams to advance on the field  * It requires complete team work, hard work, and strength. That meaning translates to software development    See original article from Scrum Alliance\n Scrum and Agile Scrum is one of several agile frameworks.  Scrum is the most popular agile framework.\n    Scrum Definition Scrum: An [agile] framework within which people can address complex adaptive problems, while productively and creatively delivering products of the highest possible value.\nScrum refers to a lightweight framework that is used in every industry to deliver complex, innovative products and services that truly delight customers. It is simple to understand, but difficult to master.  Scrum fulfils the vision of the Agile Manifesto by helping individuals and businesses organize their work to\n maximize collaboration, minimize errors, deliver frequently, and create multiple opportunities to inspect and adapt.   Scrum Guide, November 2017 version\n How Scrum works Scrum works by delivering large projects in small chunks of the product that a team can begin and complete in one, short timeboxed iteration called sprint.\nScrum is also both iterative and incremental.   Scrum Framework People are the focus of Scrum.\nScrum Teams include people with diverse skillsets; each team has all of the capabilities necessary to deliver a piece of functionality from idea to delivery.  Sprint is a short (one to four weeks long) timeframe during which the team works on some chunks of …","date":-62135596800,"description":"","objectID":"ba9b60dfdb6db23d03e8a8179b571438","permalink":"https://soft-eng-practicum.github.io/softdev2-resources/student/chapter-requirements/chapter-userstories/","title":"User Stories"},{"content":"Software Protection ITEC 3870 Software Development II, Anca Doloc-Mihu and Cengiz Günay Licensed with CC BY-SA 4.0\n","date":-62135596800,"description":"","objectID":"2e065a23fb36a64b24fb015bc4bd39f8","permalink":"https://soft-eng-practicum.github.io/softdev2-resources/student/chapter-software-protection/","title":"Software Protection"},{"content":"Intellectual Property ITEC 3870 Software Development II, Anca Doloc-Mihu and Cengiz Günay Licensed with CC BY-SA 4.0\n","date":-62135596800,"description":"","objectID":"476773e1422c16a7a9566b5ae2739e8a","permalink":"https://soft-eng-practicum.github.io/softdev2-resources/student/chapter-software-protection/intellectual-property/","title":"Intellectual Property"},{"content":"Licensing ITEC 3870 Software Development II, Anca Doloc-Mihu and Cengiz Günay Licensed with CC BY-SA 4.0\n","date":-62135596800,"description":"","objectID":"55be9cc3251b7fdcdc6cb58b9c5e13d1","permalink":"https://soft-eng-practicum.github.io/softdev2-resources/student/chapter-software-protection/licensing/","title":"Licensing"},{"content":"Version Control ITEC 3870 Software Development II, Anca Doloc-Mihu and Cengiz Günay Licensed with CC BY-SA 4.0\n  \n Why Version Control?  It\u0026amp;rsquo;s a must in today\u0026amp;rsquo;s computing industry  Mt. Gox, a company that don\u0026amp;rsquo;t use VC and lost almost a billion dollars… Another painful story without VC challenge: find more horror stories!   You can even version control documents, class files, financial files, … Also called source control, code management, concurrent versioning, revision control, …  Advantages:\n Track changes, keep logs of past development Automatic backups/safety net Concurrent versions: XP vs. Win8 Allows teamwork    Teamwork on the same codebase: How? Seriously, how?   Teamwork: No control? Overwrite chaos!    Teamwork: Locking    Teamwork: Merging    Merging example    Each commit increments version   \n Github for version control     \n       git is the program behind Github Common usage scenario:\n git clone gets working copy from repo Make changes in local working copy git add \u0026amp;lt;files...\u0026amp;gt; to select your changed files git commit saves your changes into the version control history with a comment (Wash, rinse, and repeat step 2. Commit often!) git push publishes your previous commits to remote repository (Github) git pull receives latest changes from repo to sync   Useful commands: Investigating the past  git diff shows your changes from last repo version git log [filename] lists all commits, optionally those touching a filename git diff \u0026amp;lt;commit\u0026amp;gt; shows changes in version labeled as \u0026amp;lt;commit\u0026amp;gt; git checkout \u0026amp;lt;commit\u0026amp;gt; rewinds all files back to a version  Challenge: How to find a bug  You have been messing with the code Suddenly you realized you broke the program How do you find when was the bug introduced?    Hint: use git checkout \u0026amp;lt;commit\u0026amp;gt;\n    Common issues with Git Avoiding bloating and conflict hell:\n The .gitignore file: Add lines of file patterns to be kept out of your repo.  Mac vs PC guy: different line endings:\n Can …","date":-62135596800,"description":"","objectID":"17aeffb5f3818ad789d2b0335cde19ce","permalink":"https://soft-eng-practicum.github.io/softdev2-resources/student/chapter-version-control/","title":"Version Control"},{"content":"Github Social Computing ITEC 3870 Software Development II, Anca Doloc-Mihu and Cengiz Günay Licensed with CC BY-SA 4.0\n","date":-62135596800,"description":"","objectID":"de98cdc066fba8ed9e080f3aa10348e8","permalink":"https://soft-eng-practicum.github.io/softdev2-resources/student/chapter-version-control/github-social-computing/","title":"Github Social Computing"}]